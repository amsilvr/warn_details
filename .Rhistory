st_transform('+proj=longlat +datum=WGS84') %>%
left_join(lsad_lookup()) %>%
distinct(GEOID)
lsl
head(allCounties, 10)
lsl
lsad_lookup <- function() {
# This looks up the location classification names
# from lsad.html
# and makes them readable for the data labels in the
# choropleth
url <- "https://www.census.gov/geo/reference/lsad.html"
lsad <- htmltab::htmltab(doc = url, which = "//th[text() = 'LSAD']/ancestor::table") %>%
filter(grepl("06|04|12|05|03|00|15|25|13", LSAD) == TRUE) %>%
transmute(LSAD,description = `LSAD Description`) %>%
mutate(description =
str_extract(pattern = "^[^(]*",string = description) %>%
str_trim() %>%
str_to_title()) %>%
replace_na(list(LSAD = "", description = "")) %>%
filter(!description == "Balance of County EC Place")
}
lsl2 <- lsad_lookup()
lsl2
lsad_lookup <- function() {
# This looks up the location classification names
# from lsad.html
# and makes them readable for the data labels in the
# choropleth
url <- "https://www.census.gov/geo/reference/lsad.html"
lsad <- htmltab::htmltab(doc = url, which = "//th[text() = 'LSAD']/ancestor::table") %>%
filter(grepl("06|04|12|05|03|00|15|25|13", LSAD) == TRUE) %>%
transmute(LSAD,description = `LSAD Description`) %>%
mutate(description =
str_extract(pattern = "^[^(]*",string = description) %>%
str_trim() %>%
str_to_title()) %>%
replace_na(list(LSAD = "", description = "")) %>%
filter(!description == "Balance Of County Ec Place")
}
rm(lsl)
rm(lsl2)
rm(allCounties)
rm(counties_sf)
counties_sf <- read_sf(c_shp[grep("shp$", c_shp)]  #pulls the shp file from the zip
,quiet = TRUE, stringsAsFactors = FALSE) %>%
left_join(state_iso) %>%
st_transform('+proj=longlat +datum=WGS84') %>%
left_join(lsad_lookup()) %>%
mutate(NAME = str_replace_all(NAME, pattern = "ÃƒÂƒÃ‚Â±",replacement = "ÃƒÂ±") %>%
str_replace_all("ÃƒÂƒÃ‚Â¡",replacement = "ÃƒÂ¡") %>%
str_replace_all("ÃƒÂƒÃ‚Â¼",replacement = "ÃƒÂ±") %>%
str_replace_all("ÃƒÂƒÃ‚Â³",replacement = "ÃƒÂ³") %>%
str_replace_all("ÃƒÂƒ",replacement = "Ãƒ­"))
allCounties <- left_join(counties_sf, alert_tally)
runApp()
names(allCounties)
allCounties[GEOID == 10001]
allCounties["GEOID" == 10001]
allCounties[, "GEOID" == 10001]
head(allCounties["GEOID" == 10001,"NAME"])
allCounties["GEOID" == "10001"]
allCounties[GEOID == "10001"]
allCounties[2,3]
allCounties[, "GEOID" == "10001"]
allCounties$GEOID == "10001"
allCounties[allCounties$GEOID == "10001",]
allCounties[allCounties$GEOID == "10001",c(6,11,10)]
allCounties[allCounties$GEOID == "10001",c(6,11,10)] %>% ungroup()
allCounties[allCounties$GEOID == "10001",c(6,11,10)] %>% ungroup() %>% paste()
paste(allCounties[allCounties$GEOID == "10001",6], allCounties[allCounties$GEOID == "10001",11], allCounties[allCounties$GEOID == "10001",10])
paste(allCounties[allCounties$GEOID == "10001",6], allCounties[allCounties$GEOID == "10001",11], allCounties[allCounties$GEOID == "10001",10])[1]
runApp()
?pal
??pal
runApp('C:/Users/amsilverman/Box Sync/@Project Support/DevDataProds/shiny_choropleth')
runApp()
filter(allCounties, GEOID == 1001)
filter(allCounties, GEOID == 1001) %>% data_frame()
filter(allCounties, GEOID == 1001) %>% st_simplify()
?sf
??sf
filter(allCounties, GEOID == 1001) %>% as.data.frame()
filter(allCounties, GEOID == "10001") %>% as.data.frame()
filter(allCounties, GEOID == "10001") %>% as.data.frame() %>% select(6,11,10)
filter(allCounties, GEOID == "10001") %>% as.data.frame() %>% select(6,11,10) %>% collapse()
filter(allCounties, GEOID == "10001") %>% as.data.frame() %>% select(6,11,10) %>% paste()
filter(allCounties, GEOID == "10001") %>% as.data.frame() %>% select(6,11,10) %>% paste(sep = " ",collapse = TRUE)
filter(allCounties, GEOID == "10001") %>% as.data.frame() %>% select(6,11,10) %>% paste(sep = " ",collapse = " ")
runApp()
runApp('C:/Users/amsilverman/Box Sync/@Project Support/DevDataProds/shiny_choropleth/archive/app_ahead.R')
runApp()
source('C:/Users/amsilverman/Box Sync/@Project Support/Data_Science/warn_details/leaflet.R')
p
source('C:/Users/amsilverman/Box Sync/@Project Support/Data_Science/warn_details/leaflet.R')
long <- alert_tally %>%
gather("alertType", "value")
str(long)
long <- alert_tally %>%
gather("alertType", "value", -GEOID)
str(long)
head(long)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(select(counties_sf, 5:12))
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(counties_sf, 5:12)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(counties_sf)
source('C:/Users/amsilverman/Box Sync/@Project Support/Data_Science/warn_details/leaflet.R')
class(long_county)
class(long)
rm(long)
rm(long_county)
class(counties_sf)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(counties_sf)
class(long_county)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(counties_sf) %>%
read_sf()
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(counties_sf) %>%
sf()
?sf
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(counties_sf) %>%
st_sf()
class(long_county)
p <- leaflet(data = long_county) %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -93.85, lat = 37.45, zoom = 5) %>%
addPolygons(data = long_county
, group = ~alertType
, layerId = ~GEOID
, stroke = FALSE
, label = ~paste0("<strong>"
,NAME
," "
,description #lookup table for lsad
,", "
,iso_3166_2
,":</strong><br />"
,inst
," "
,input$alertType
," WEA Messages") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .6
, smoothFactor = .5
, fillColor = ~pal(inst)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)
)
p <- leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4)
p
p <- leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4)
p <- leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(data = long_county$geometry
, group = ~alertType
, layerId = ~GEOID
, stroke = FALSE
, label = ~paste0("<strong>"
,NAME
," "
,description #lookup table for lsad
,", "
,iso_3166_2
,":</strong><br />"
,inst
," "
,input$alertType
," WEA Messages") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .6
, smoothFactor = .5
, fillColor = ~pal(inst)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)
)
head(long_county$geometry)
p <- leaflet(data = long_county) %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4)
p
source('C:/Users/amsilverman/Box Sync/@Project Support/Data_Science/warn_details/leaflet.R')
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
p <- leaflet(data = counties_sf) %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(group = alertType
, layerId = ~GEOID
, stroke = FALSE
, label = ~paste0("<strong>"
,NAME
," "
,description #lookup table for lsad
,", "
,iso_3166_2
,":</strong><br />"
,inst
," "
,input$alertType
," WEA Messages") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .6
, smoothFactor = .5
, fillColor = ~pal(inst)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)
)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
p <- leaflet(data = counties_sf) %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(#group = alertType,
layerId = ~GEOID
, stroke = FALSE
, label = ~paste0("<strong>"
,NAME
," "
,description #lookup table for lsad
,", "
,iso_3166_2
,":</strong><br />"
,inst
," "
,input$alertType
," WEA Messages") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .6
, smoothFactor = .5
, fillColor = ~pal(inst)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)
)
source('C:/Users/amsilverman/Box Sync/@Project Support/Data_Science/warn_details/leaflet.R')
p
attr(long_county)
attr(long_county,"names")
str(long_county)
attr(long_county,"labels")
select(counties_sf, GEOID, geometry)
select.sf(counties_sf, GEOID, geometry)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID, factor_key = TRUE)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
st_sf() %>%
left_join(counties_sf)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(counties_sf)#%>%
class(long_county)
long_county <- alert_tally %>%
gather("alertType", "value", -GEOID) %>%
left_join(counties_sf) %>%
ungroup() %>%
st_sf()
class(long_county)
p <- leaflet(data = long_county) %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(group = ~alertType,
layerId = ~GEOID
, stroke = FALSE
# , label = ~paste0("<strong>"
#                   ,NAME
#                   ," "
#                   ,description #lookup table for lsad
#                   ,", "
#                   ,iso_3166_2
#                   ,":</strong><br />"
#                   ,inst
#                   ," "
#                   ,input$alertType
#                   ," WEA Messages") %>%
#     lapply(htmltools::HTML)
# , labelOptions = labelOptions(style = list(
#     "color" = "#2b3e50",
#     "box-shadow" = "3px 3px rgba(0,0,0,0.25)",
#     "text-align" = "left",
#     "font-size" = "17px",
#     "border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .2
, smoothFactor = .5
# , fillColor = ~pal(inst)
# , highlight = highlightOptions(
#     weight = 5,
#     color = "#666",
#     dashArray = "",
#     fillOpacity = 1,
#     bringToFront = FALSE)
)
shiny::runApp()
runApp()
library(shiny)
runApp()
counties_sf <- read_sf(c_shp[grep("shp$", c_shp)]  #pulls the shp file from the zip
,quiet = TRUE, stringsAsFactors = FALSE) %>%
left_join(state_iso) %>%
st_transform('+proj=longlat +datum=WGS84') %>%
left_join(lsad_lookup()) %>%
mutate(NAME = str_replace_all(NAME, pattern = "ÃƒÂƒÃ‚Â±",replacement = "ÃƒÂ±") %>%
str_replace_all("ÃƒÂƒÃ‚Â¡",replacement = "ÃƒÂ¡") %>%
str_replace_all("ÃƒÂƒÃ‚Â¼",replacement = "ÃƒÂ±") %>%
str_replace_all("ÃƒÂƒÃ‚Â³",replacement = "ÃƒÂ³") %>%
str_replace_all("ÃƒÂƒ",replacement = "Ãƒ­"))
c_shp <- unzip("data/county_shape_file.zip", exdir = "data")
counties_sf <- read_sf(c_shp[grep("shp$", c_shp)]  #pulls the shp file from the zip
,quiet = TRUE, stringsAsFactors = FALSE) %>%
left_join(state_iso) %>%
st_transform('+proj=longlat +datum=WGS84') %>%
left_join(lsad_lookup()) %>%
mutate(NAME = str_replace_all(NAME, pattern = "ÃƒÂƒÃ‚Â±",replacement = "ÃƒÂ±") %>%
str_replace_all("ÃƒÂƒÃ‚Â¡",replacement = "ÃƒÂ¡") %>%
str_replace_all("ÃƒÂƒÃ‚Â¼",replacement = "ÃƒÂ±") %>%
str_replace_all("ÃƒÂƒÃ‚Â³",replacement = "ÃƒÂ³") %>%
str_replace_all("ÃƒÂƒ",replacement = "Ãƒ­"))
runApp()
rm(list = ls())
shiny::runApp()
file.copy("app.R", "temp", copy.date = TRUE)
runApp('temp')
getwd()
runApp('temp')
install.packages(c("bindrcpp", "evaluate", "glue", "quantmod", "rmarkdown", "tseries", "XML"))
remove.packages("sf", lib="C:/Program Files/R/R-3.4.0/library")
install.packages("sf", lib="C:/Program Files/R/R-3.4.0/library")
shiny::runApp('temp')
allCounties <- left_join(counties_sf, alert_tally)
allCounties <- left_join(counties_sf(), alert_tally)
counties_sf <- read_sf(c_shp[grep("shp$", c_shp)]) %>% #pulls the shp file from the zip
left_join(state_iso) %>%
st_transform('+proj=longlat +datum=WGS84') %>%
inner_join(lsad_lookup())
c_shp <- unzip("data/county_shape_file.zip", exdir = "data")
counties_sf <- read_sf(c_shp[grep("shp$", c_shp)]) %>% #pulls the shp file from the zip
left_join(state_iso) %>%
st_transform('+proj=longlat +datum=WGS84') %>%
inner_join(lsad_lookup())
allCounties <- left_join(counties_sf, alert_tally)
str(allCounties)
names(allCounties)
allCounties <- left_join(counties_sf, alert_tally) %>%
select(5,6,10,12:18)
str(allCounties)
allCounties <- left_join(counties_sf, alert_tally) %>%
select(5,6,10:18)
str(allCounties)
runApp('temp')
filter(allCounties, GEOID == "20101")
filter(allCounties, GEOID == "20101") %>% select(NAME, description, iso_3166_2)
filter(allCounties, GEOID == "20101") %>% select(NAME, description, iso_3166_2) %>% st_set_geometry(NULL)
filter(allCounties, GEOID == "20101") %>% select(NAME, description, iso_3166_2) %>% st_set_geometry(NULL) %>% paste()
filter(allCounties, GEOID == "20101") %>% select(NAME, description, iso_3166_2) %>% st_set_geometry(NULL) %>% paste(collapse = " ")
runApp('temp')
filter(allCounties, GEOID == "04013") %>% select(NAME, description, iso_3166_2) %>% st_set_geometry(NULL) %>% paste(collapse = " ")
filter(allCounties, GEOID == "18157") %>% select(NAME, description, iso_3166_2) %>% st_set_geometry(NULL) %>% paste(collapse = " ")
runApp('temp')
?h1
runApp('temp')
?column
runApp('temp')
?renderTable
methods(xtable)
methods("xtable")
library(xtable)
methods(xtable)
mt <- xtable(mtcars)
align(mt) <- xalign(mt)
mt
??xtable
?xtable
runApp('temp')
allCounties$GEOID
runApp('temp')
fd()
head(fd())
county_events
output$events
events
click_data
attributes(click_data)
click_data$names
list(click_data)
click_data[[1]]
click_data$clickedShape
runApp('temp')
click_data$clickedShape$id
runApp('temp')
?fluidRow
runApp('temp')
ui <- fluidPage(
theme = shinytheme('darkly'),
# Application title
tags$style(type = "text/css",
"html,
body {width:100%;height:100%;text-align:center;}
.selectize-input { font-size: 32px; background-color:aqua; }
.selectize-dropdown { font-size: 25px; line-height: 30px; }
.control-label { font-size: 32px; color: white!important;}
.shiny-input-container {background-color:black;}
.content::-webkit-scrollbar {display: none;"),
column(4, #Title and instructions
h1("WARN Alerts by County"),
h3("Mouse over map for more info")
),
column(4, # HTML Selector menu
selectInput(inputId = "alertType" , label = "Which Alert Type?"
,choices = c("Total" = "Total"
,"AMBER Alert" = "AMBER"
,"Flash Flood" = "FlashFlood"
,"Hurricane" = "Hurricane"
,"Tornado" = "Tornado"
,"Other" = "Other")
)
),
column(2, offset = 10,
browser()
h3(textOutput("type"),
"Warnings for ",
textOutput("county_name")),
tableOutput("events")
),
# Show choropleth of selected alerts
column(8,
leafletOutput("map", height = "600px")
)
runApp('temp')
View(tryCatch.W.E)
?tryCatch
?simpleError
runApp('temp')
?paste
runApp('temp')
?reactive
runApp('temp')
?css
runApp('temp')
input$map_shape_click
runApp('temp')
click_data
input$map_shape_click
inst
input$alertType
runApp('temp')
?p
runApp('temp')
?renderTable
runApp('temp')
library(rsconnect)
rsconnect::setAccountInfo(name='silverman', token='4A1FB98FFF5566E78191A94411A1A3CC', secret='3XSzBbrPE5CWN0oXz+jNEURWSl1JnjqkJlqFK/Gr')
rsconnect::setAccountInfo(name='silverman', token='1E64F1A06434496BC20BE1FF3488B5D4', secret='1Fp0rl6KLP//M3R+Y1vyUzG++Ki25ONPOvHw+Byx')
install.packages("googlesheets")
install.packages("sf")
