#browser()
file_start <- 'msgfile_'
day_file_name <- paste0('data/',file_start, today(),'.csv')
if (file.exists(day_file_name)) { # get today's file from local disk
msg <- read_csv(day_file_name)
} else if (any(grepl(pattern = file_start, x = dir('data/')))) { # get previous file from local disk
msg <- read_csv(file = paste0('data/',
dir('data/', pattern = file_start)))
} else { #go back to google sheet
# first update the sheet
source('_Monthly_Message_Copy.R')
NewCMASImport()
# get all records
# ss_new <- gs_key("1Xw4JefUCS4HHQ0KpvKhr-DjklqzhH3_CeA-zhoAuQfI", visibility = "private") #CMAS_Alerts_Processed
msg <-  gs_read_csv(ss = ss_new
, col_names = c("rec_time", "cmac", "full_text")
, coltypes = "Tcc", skip = 1, trim_ws = TRUE) %>%
mutate(rec_time = mdy_hms(gsub(" at ", " ", rec_time)
, tz = "America/New_York"
, truncated = 3)
) %>%
separate(full_text,
c("blank", "gateway_id" ,"msg_id"
,"special_handling", "message_type"
, "category", "response_type", "severity"
, "urgency", "certainty", "expire_time"
, "text_language", "alert_message","dummy")
, sep = "CMAC_[:word:]*: "
, fill = "right" ## drops the warning for rows with too many records
, remove = TRUE
)
## creates a table for fields with "update" records
updates <- filter(msg, nchar(special_handling) < 10) %>%
select(rec_time, cmac, gateway_id, msg_id
, ref_id = special_handling
, special_handling = message_type
, message_type = category
, category = response_type
, response_type = severity
, severity = urgency
, urgency = certainty
, certainty = expire_time
, text_language = alert_message
, alert_message = dummy
)
msg <- filter(msg, nchar(special_handling) >= 10) %>%
select(-blank, -dummy)
## puts all the records back into a single table and
## uses two different separators to split out the alert
## text from the plain English "area" field
## and finally removes the tcs boilerplate
msg <- bind_rows(msg, updates) %>%
mutate(expire_time = ymd_hms(expire_time)) %>%
separate(alert_message, c("message_text","t2")
, sep = "Targeted Areas: "
, remove = TRUE) %>%
separate(t2, c("areas"), sep = "[:punct:]{4}"
, extra = "drop", remove = TRUE) %>%
mutate(threat_type = gsub("\\. .*","", cmac)
, msg_id = as.character(str_trim(msg_id))
, areas = str_trim(areas)) %>%
dplyr::filter(!(gateway_id == "http://tcs.tsis.com\n") )
msg <- msg[-grep(" test", msg$threat_type),]
write_csv(msg, path = day_file_name, col_names = TRUE, append = FALSE)
}
return(msg)
}
load_msgs()
rm(list = ls())
source('C:/Users/amsilverman/Box Sync/_Project Support/Data_Science/warn_details/CMAS_Clean_shiny.R', encoding = 'UTF-8')
load_vars()
rm(list = ls())
load_vars()
source('C:/Users/amsilverman/Box Sync/_Project Support/Data_Science/warn_details/CMAS_Clean_shiny.R', encoding = 'UTF-8')
load_vars()
runApp()
exit()
q()
shiny::runApp()
runApp()
shiny::runApp()
source('C:/Users/amsilverman/Box Sync/_Project Support/Data_Science/warn_details/CMAS_Clean_shiny.R', encoding = 'UTF-8')
load_msgs <- function() {
browser()
file_start <- 'msgfile_'
day_file_name <- paste0('data/',file_start, today(),'.csv')
if (file.exists(day_file_name)) { # get today's file from local disk
msg <- read_csv(day_file_name)
} else if (any(grepl(pattern = file_start, x = dir('data/')))) { # get previous file from local disk
msg <- read_csv(file = paste0('data/',
dir('data/', pattern = file_start)))
} else { #go back to google sheet
# first update the sheet
source('_Monthly_Message_Copy.R')
NewCMASImport()
# get all records
#ss_new <- gs_key("1Xw4JefUCS4HHQ0KpvKhr-DjklqzhH3_CeA-zhoAuQfI", visibility = "private") #CMAS_Alerts_Processed
msg <-  gs_read_csv(ss = ss_new
, col_names = c("rec_time", "cmac", "full_text")
, coltypes = "Tcc", skip = 1, trim_ws = TRUE) %>%
mutate(rec_time = mdy_hms(gsub(" at ", " ", rec_time)
, tz = "America/New_York"
, truncated = 3)
) %>%
separate(full_text,
c("blank", "gateway_id" ,"msg_id"
,"special_handling", "message_type"
, "category", "response_type", "severity"
, "urgency", "certainty", "expire_time"
, "text_language", "alert_message","dummy")
, sep = "CMAC_[:word:]*: "
, fill = "right" ## drops the warning for rows with too many records
, remove = TRUE
)
## creates a table for fields with "update" records
updates <- filter(msg, nchar(special_handling) < 10) %>%
select(rec_time, cmac, gateway_id, msg_id
, ref_id = special_handling
, special_handling = message_type
, message_type = category
, category = response_type
, response_type = severity
, severity = urgency
, urgency = certainty
, certainty = expire_time
, text_language = alert_message
, alert_message = dummy
)
msg <- filter(msg, nchar(special_handling) >= 10) %>%
select(-blank, -dummy)
## puts all the records back into a single table and
## uses two different separators to split out the alert
## text from the plain English "area" field
## and finally removes the tcs boilerplate
msg <- bind_rows(msg, updates) %>%
mutate(expire_time = ymd_hms(expire_time)) %>%
separate(alert_message, c("message_text","t2")
, sep = "Targeted Areas: "
, remove = TRUE) %>%
separate(t2, c("areas"), sep = "[:punct:]{4}"
, extra = "drop", remove = TRUE) %>%
mutate(threat_type = gsub("\\. .*","", cmac)
, msg_id = as.character(str_trim(msg_id))
, areas = str_trim(areas)) %>%
dplyr::filter(!(gateway_id == "http://tcs.tsis.com\n") )
msg <- msg[-grep(" test", msg$threat_type),]
write_csv(msg, path = day_file_name, col_names = TRUE, append = FALSE)
}
return(msg)
}
load_msgs()
file.exists(day_file_name)
rm(list = ls()))
rm(list = ls())
runApp()
shiny::runApp()
install.packages(c("BH", "callr", "digest", "DT", "haven", "hexbin", "hms", "htmlTable", "htmlwidgets", "irlba", "knitr", "lubridate", "mapview", "mvtnorm", "openssl", "pillar", "prettydoc", "Rcpp", "reprex", "RGtk2", "rvg", "shape", "showtext", "sp", "spatstat", "sysfonts", "tibble", "tidycensus", "tidyr", "tmap", "tmaptools", "TTR", "urltools", "viridis", "viridisLite", "xaringan", "xml2"))
install.packages("flexdashboard")
installr::check.for.updates.R()
library(flexdashboard)
shiny::runApp()
runApp()
?quantile
library(leaflet)
source('C:/Users/amsilverman/OneDrive/Data_Science/warn_details/leaflet.R')
rm(list = ls())
library(shiny)
library(leaflet)
source("CMAS_Clean_shiny.R", echo = TRUE)
load_vars()
countyshapes_url <- "http://www2.census.gov/geo/tiger/GENZ2016/shp/cb_2016_us_county_20m.zip"
if (!dir.exists("data")) {dir.create("data")}
if (!file.exists("data/county_shape_file.zip")) {
download.file(countyshapes_url
, destfile = "data/county_shape_file.zip")
}
c_shp <- unzip(zipfile = 'data/county_shape_file.zip',
exdir = 'data')
counties_sf <- read_sf(c_shp[grep("shp$", c_shp)]) %>%
as.data.frame() %>% #to fix July 25 problem with the join.sf methods
inner_join(lsad_lookup()) %>%
select(STATEFP, COUNTYFP, GEOID, NAME, description, geometry) %>%
left_join(state_sf %>% select(STATEFP, STUSPS)) %>%
st_sf(sf_column_name = 'geometry') %>%
st_transform('+proj=longlat +datum=WGS84')
file.remove(c_shp)
long_county <- counties_sf %>%
transmute(GEOID
, name = paste0(NAME, " ", description,", ", iso_3166_2)
, geometry) %>%
left_join(alert_tally %>%
gather("alertType", "value", -GEOID)
)
long_county <- counties_sf %>%
transmute(GEOID
, name = paste0(NAME, " ", description,", ", STUSPS)
, geometry) %>%
left_join(alert_tally %>%
gather("alertType", "value", -GEOID)
)
### Remove na's ###
long_county[is.na(long_county)] <- 0
#bins <- c(0, 1, 3, 5, 10, 20, 30, 40, 80, 205)
bins <- c(1,5,10,15,20,25,30,40,50,240)
pal <- colorBin("YlOrRd",
domain = NULL,
bins = bins,
pretty = TRUE,
na.color = "#fefefe")
p <- leaflet() %>%
addTiles() %>%
#addProviderTiles(providers$Stamen.TonerLite, group = "Toner by Stamen") %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(
data = long_county
, group = ~alertType
, layerId = ~paste(GEOID, alertType)
, stroke = FALSE
, label = ~paste0("<strong>"
,name
,":</strong><br />"
, value, " "
, alertType, " Alerts") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .5
, smoothFactor = .5
, fillColor = ~pal(value)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)) %>%
# addPopups(data = long_county
#           , group = ~alertType
#           #, layerID = ~paste(GEOID, alertType)
#           , popup = ~paste(GEOID, alertType, value)) %>%
addLayersControl(baseGroups = c("Total"
, "AMBER"
, "FlashFlood"
, "Hurricane"
, "Tornado"
, "Other")
, options = layersControlOptions(autoZIndex = FALSE
, collapse = FALSE
, position = "topleft"))  %>%
addControl("<img src = 'docs/New Logo.png'>", position = "bottomleft") %>%
addLegend(pal = pal
, values = bins
, opacity = .5
#, group = alertType
, title = paste0("Number of "," WEAs")
, position = "topleft")
p
p <- leaflet() %>%
#addTiles() %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner by Stamen") %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(
data = long_county
, group = ~alertType
, layerId = ~paste(GEOID, alertType)
, stroke = FALSE
, label = ~paste0("<strong>"
,name
,":</strong><br />"
, value, " "
, alertType, " Alerts") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .5
, smoothFactor = .5
, fillColor = ~pal(value)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)) %>%
# addPopups(data = long_county
#           , group = ~alertType
#           #, layerID = ~paste(GEOID, alertType)
#           , popup = ~paste(GEOID, alertType, value)) %>%
addLayersControl(baseGroups = c("Total"
, "AMBER"
, "FlashFlood"
, "Hurricane"
, "Tornado"
, "Other")
, options = layersControlOptions(autoZIndex = FALSE
, collapse = FALSE
, position = "topleft"))  %>%
addControl("<img src = 'docs/New Logo.png'>", position = "bottomleft") %>%
addLegend(pal = pal
, values = bins
, opacity = .5
#, group = alertType
, title = paste0("Number of ",group, " WEAs")
, position = "topleft")
p <- leaflet() %>%
#addTiles() %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner by Stamen") %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(
data = long_county
, group = ~alertType
, layerId = ~paste(GEOID, alertType)
, stroke = FALSE
, label = ~paste0("<strong>"
,name
,":</strong><br />"
, value, " "
, alertType, " Alerts") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .5
, smoothFactor = .5
, fillColor = ~pal(value)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)) %>%
# addPopups(data = long_county
#           , group = ~alertType
#           #, layerID = ~paste(GEOID, alertType)
#           , popup = ~paste(GEOID, alertType, value)) %>%
addLayersControl(baseGroups = c("Total"
, "AMBER"
, "FlashFlood"
, "Hurricane"
, "Tornado"
, "Other")
, options = layersControlOptions(autoZIndex = FALSE
, collapse = FALSE
, position = "topleft"))  %>%
addControl("<img src = 'docs/New Logo.png'>", position = "bottomleft") %>%
addLegend(pal = pal
, values = bins
, opacity = .5
#, group = alertType
, title = paste0("Number of ",~alertType," WEAs")
, position = "topleft")
p
p <- leaflet() %>%
#addTiles() %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner by Stamen") %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(
data = long_county
, group = ~alertType
, layerId = ~paste(GEOID, alertType)
, stroke = FALSE
, label = ~paste0("<strong>"
,name
,":</strong><br />"
, value, " "
, alertType, " Alerts") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .5
, smoothFactor = .5
, fillColor = ~pal(value)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)) %>%
# addPopups(data = long_county
#           , group = ~alertType
#           #, layerID = ~paste(GEOID, alertType)
#           , popup = ~paste(GEOID, alertType, value)) %>%
addLayersControl(baseGroups = c("Total"
, "AMBER"
, "FlashFlood"
, "Hurricane"
, "Tornado"
, "Other")
, options = layersControlOptions(autoZIndex = FALSE
, collapse = FALSE
, position = "topleft"))  %>%
addControl("<img src = 'docs/New Logo.png'>", position = "bottomleft") %>%
addLegend(pal = pal
, values = bins
, opacity = .5
#, group = alertType
, title = paste0("Number of ",alertType," WEAs")
, position = "topleft")
p <- leaflet() %>%
#addTiles() %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner by Stamen") %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(
data = long_county
, group = ~alertType
, layerId = ~paste(GEOID, alertType)
, stroke = FALSE
, label = ~paste0("<strong>"
,name
,":</strong><br />"
, value, " "
, alertType, " Alerts") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .5
, smoothFactor = .5
, fillColor = ~pal(value)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)) %>%
# addPopups(data = long_county
#           , group = ~alertType
#           #, layerID = ~paste(GEOID, alertType)
#           , popup = ~paste(GEOID, alertType, value)) %>%
addLayersControl(baseGroups = c("Total"
, "AMBER"
, "FlashFlood"
, "Hurricane"
, "Tornado"
, "Other")
, options = layersControlOptions(autoZIndex = FALSE
, collapse = FALSE
, position = "topleft"))  %>%
addControl("<img src = 'docs/New Logo.png'>", position = "bottomleft") %>%
addLegend(pal = pal
, values = bins
, opacity = .5
, group = alertType
, title = paste0("Number of ",group," WEAs")
, position = "topleft")
source('C:/Users/amsilverman/OneDrive/Data_Science/warn_details/leaflet.R')
p <- leaflet() %>%
#addTiles() %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner by Stamen") %>%
setView(lng = -93.85, lat = 37.45, zoom = 4) %>%
addPolygons(
data = long_county
, group = ~alertType
, layerId = ~paste(GEOID, alertType)
, stroke = FALSE
, label = ~paste0("<strong>"
,name
,":</strong><br />"
, value, " "
, alertType, " Alerts") %>%
lapply(htmltools::HTML)
, labelOptions = labelOptions(style = list(
"color" = "#2b3e50",
"box-shadow" = "3px 3px rgba(0,0,0,0.25)",
"text-align" = "left",
"font-size" = "17px",
"border-color" = "rgba(0,0,0,0.5)"))
, fillOpacity = .5
, smoothFactor = .5
, fillColor = ~pal(value)
, highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 1,
bringToFront = FALSE)) %>%
# addPopups(data = long_county
#           , group = ~alertType
#           #, layerID = ~paste(GEOID, alertType)
#           , popup = ~paste(GEOID, alertType, value)) %>%
addLayersControl(baseGroups = c("Total"
, "AMBER"
, "FlashFlood"
, "Hurricane"
, "Tornado"
, "Other")
, options = layersControlOptions(autoZIndex = FALSE
, collapse = FALSE
, position = "topleft"))  %>%
addControl("<img src = 'docs/New Logo.png'>", position = "bottomleft") %>%
addLegend(pal = pal
, values = bins
, opacity = .5
#, group = ~alertType
, title = paste0("Number of "," WEAs")
, position = "topleft")
